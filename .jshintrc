{
    //Enforcing
 "undef"  : true,     // true: Require all non-global variables to be declared (prevents global leaks)
 "unused" : true,     // Unused variables:
 "strict" : true,     // true: Requires all functions run in ES5 Strict Mode
 "bitwise": true,     // true: Prohibit bitwise operators (&, |, ^, etc.)
 "curly"  : true,     // true: Require {} for every new block or scope
"eqeqeq"  : true,     // true: Require triple equals (===) for comparison
"forin"   : true,     // true: Require filtering for..in loops with obj.hasOwnProperty()
"freeze"  : true,     // true: prohibits overwriting prototypes of native objects such as Array, Date etc.
"immed"   : false,    // true: Require immediate invocations to be wrapped in parens e.g. `(function () { } ());`
"esversion"  : 5,         // {int} Specify the ECMAScript version to which the code must adhere.
"funcscope"  : false,     // true: Tolerate defining variables inside control statements
"iterator"   : false,     // true: Tolerate using the `__iterator__` property
"latedef"    : false,    // true: Require variables/functions to be defined before being used
"maxcomplexity" : false,    // {int} Max cyclomatic complexity per function
"maxdepth"      : false,    // {int} Max depth of nested blocks (within functions)
"maxerr"        : 50,       // {int} Maximum error before stopping
"maxparams"     : false,    // {int} Max number of formal params allowed per function
"maxstatements" : false,    // {int} Max number statements per function
"newcap"        : false,    // true: Require capitalization of all constructor functions e.g. `new F()`
"noarg"         : true,     // true: Prohibit use of `arguments.caller` and `arguments.callee`
"nocomma"		: true,     // true: prohibits the use of the comma operator.
"noempty"       : true,     // true: Prohibit use of empty blocks
"nonbsp"        : true,     // true: Prohibit "non-breaking whitespace" characters.
"nonew"         : false,    // true: Prohibit use of constructors for side-effects (without assignment)
"notypeof"      : false,     // true: Tolerate invalid typeof operator values
"varstmt"       : false,    // true: Disallow any var statements. Only `let` and `const` are allowed.
"globals": {
	"window" :false
},
// Relaxing
"asi"          : false,     // true: Tolerate Automatic Semicolon Insertion (no semicolons)
"boss"          : false,     // true: Tolerate assignments where comparisons would be expected
"debug"         : false,     // true: Allow debugger statements e.g. browser breakpoints.
"eqnull"        : false,     // true: Tolerate use of `== null`
"evil"          : false,     // true: Tolerate use of `eval` and `new Function()`
"expr"          : false,     // true: Tolerate `ExpressionStatement` as Programs
"lastsemic"     : false,     // true: Tolerate omitting a semicolon for the last statement of a 1-line block
"laxbreak"      : false,     // true: Tolerate possibly unsafe line breakings
"laxcomma"      : false,     // true: Tolerate comma-first style coding
"loopfunc"      : false,     // true: Tolerate functions being defined in loops
"multistr"      : false,     // true: Tolerate multi-line strings
"noyield"       : false,     // true: Tolerate generator functions with no yield statement in them.
"plusplus"      : false,    // true: Prohibit use of `++` and `--`
"proto"         : false,     // true: Tolerate using the `__proto__` property
"scripturl"     : false,     // true: Tolerate script-targeted URLs
"sub"           : false,     // true: Tolerate using `[]` notation when it can still be expressed in dot notation
"supernew"      : false,     // true: Tolerate `new function () { ... };` and `new Object;`
"validthis"     : false,     // true: Tolerate using this in a non-constructor function
 "moz"           : false,     // true: Allow Mozilla specific syntax (extends and overrides esnext features)// (ex: `for each`, multiple try/catch, function expressionâ€¦)
  // Environments
"node"          : true,    // Node.js
"mocha"         : true     // Mocha
}
